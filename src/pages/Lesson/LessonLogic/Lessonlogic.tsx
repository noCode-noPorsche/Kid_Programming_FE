import { BlocklyWorkspace } from "../../../components/Blockly/index";
import { useState, useCallback, useMemo } from "react";
import { useNavigate, useParams } from "react-router-dom";
import * as Blockly from "blockly/core";
import { javascriptGenerator } from "blockly/javascript";
import Swal from "sweetalert2";
import "blockly/blocks";
import "../../../components/Blockly/dev-index.css";

// Danh s√°ch c√°c b√†i h·ªçc
const lessons = [
  {
    title: 'B√†i h·ªçc 1: S·ª≠ d·ª•ng "if" v√† "true"',
    description: 'K√©o kh·ªëi "if", ƒë·∫∑t kh·ªëi "true" v√†o ƒëi·ªÅu ki·ªán, th√™m h√†nh ƒë·ªông in "Hello world".',
    toolbox: {
      kind: "flyoutToolbox",
      contents: [
        { kind: "block", type: "controls_if" },
        { kind: "block", type: "logic_boolean", fields: { BOOL: "TRUE" } },
        {
          kind: "block",
          type: "text_print",
          inputs: {
            TEXT: { block: { type: "text", fields: { TEXT: "Hello world" } } },
          },
        },
      ],
    },
    expectedOutput: "Hello world",
  },
  {
    title: 'B√†i h·ªçc 2: S·ª≠ d·ª•ng "if" v√† "false"',
    description: 'K√©o kh·ªëi "if", ƒë·∫∑t kh·ªëi "false" v√†o ƒëi·ªÅu ki·ªán, th√™m h√†nh ƒë·ªông in "something wrong".',
    toolbox: {
      kind: "flyoutToolbox",
      contents: [
        { kind: "block", type: "controls_if" },
        { kind: "block", type: "logic_boolean", fields: { BOOL: "FALSE" } },
        {
          kind: "block",
          type: "text_print",
          inputs: {
            TEXT: { block: { type: "text", fields: { TEXT: "something wrong" } } },
          },
        },
      ],
    },
    expectedOutput: "something wrong",
  },
  {
    title: 'B√†i h·ªçc 3: S·ª≠ d·ª•ng "if" v·ªõi ƒëi·ªÅu ki·ªán ph·ª©c t·∫°p',
    description: 'K√©o kh·ªëi "if", ƒë·∫∑t kh·ªëi "and" v√†o ƒëi·ªÅu ki·ªán, k·∫øt h·ª£p "not" v√† "true", th√™m h√†nh ƒë·ªông in "ƒêi·ªÅu ki·ªán ph·ª©c t·∫°p".',
    toolbox: {
      kind: "flyoutToolbox",
      contents: [
        { kind: "block", type: "controls_if" },
        { kind: "block", type: "logic_operation", fields: { OP: "AND" } },
        { kind: "block", type: "logic_negate" },
        { kind: "block", type: "logic_boolean", fields: { BOOL: "TRUE" } },
        {
          kind: "block",
          type: "text_print",
          inputs: {
            TEXT: { block: { type: "text", fields: { TEXT: "ƒêi·ªÅu ki·ªán ph·ª©c t·∫°p" } } },
          },
        },
      ],
    },
    expectedOutput: "ƒêi·ªÅu ki·ªán ph·ª©c t·∫°p",
  },
  {
    title: 'B√†i h·ªçc 4: S·ª≠ d·ª•ng c√¢u l·ªánh "if-else"',
    description:
      'K√©o kh·ªëi "if-else", ƒë·∫∑t m·ªôt ƒëi·ªÅu ki·ªán (s·ªë l·ªõn h∆°n 10), th√™m h√†nh ƒë·ªông in "S·ªë l·ªõn h∆°n 10" ·ªü nh√°nh if v√† "S·ªë nh·ªè h∆°n ho·∫∑c b·∫±ng 10" ·ªü nh√°nh else.',
    toolbox: {
      kind: "flyoutToolbox",
      contents: [
        { kind: "block", type: "controls_ifelse" }, // Kh·ªëi if-else
        {
          kind: "block",
          type: "logic_compare",
          fields: { OP: "GT" }, // So s√°nh l·ªõn h∆°n
          inputs: {
            A: { block: { type: "math_number", fields: { NUM: 5 } } }, // S·ªë ƒë·∫ßu
            B: { block: { type: "math_number", fields: { NUM: 10 } } }, // S·ªë th·ª© hai
          },
        },
        {
          kind: "block",
          type: "text_print",
          inputs: {
            TEXT: { block: { type: "text", fields: { TEXT: "S·ªë l·ªõn h∆°n 10" } } },
          },
        },
        {
          kind: "block",
          type: "text_print",
          inputs: {
            TEXT: { block: { type: "text", fields: { TEXT: "S·ªë nh·ªè h∆°n ho·∫∑c b·∫±ng 10" } } },
          },
        },
      ],
    },
    expectedOutput: ["S·ªë l·ªõn h∆°n 10", "S·ªë nh·ªè h∆°n ho·∫∑c b·∫±ng 10"],
  },

];

const LessonLogic = () => {
  const { id, chapterIndex, lessonIndex } = useParams();
  const navigate = useNavigate();
  const currentLesson = Number(lessonIndex) || 0;
  const [workspace, setWorkspace] = useState<Blockly.Workspace | null>(null);
  const [generatedCode, setGeneratedCode] = useState("");

  // Khi workspace thay ƒë·ªïi, c·∫≠p nh·∫≠t m√£ code
  const onWorkspaceChange = useCallback((ws: Blockly.Workspace) => {
    const code = javascriptGenerator.workspaceToCode(ws);
    setGeneratedCode(code);
  }, []);

  // Ch·∫°y ch∆∞∆°ng tr√¨nh ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£
  const runCode = () => {
    try {
      let output = "";

      // Ghi ƒë√® console.log ƒë·ªÉ ch·ªâ l∆∞u k·∫øt qu·∫£ in ra
      const originalConsoleLog = console.log;
      console.log = (message) => {
        output += message + "\n";
        originalConsoleLog(message);
      };

      // Ch·ªânh s·ª≠a m√£, thay window.alert b·∫±ng console.log
      const fixedCode = generatedCode.replace(/window\.alert/g, "console.log");

      // Th·ª±c thi m√£ ƒë√£ ch·ªânh s·ª≠a
      new Function(fixedCode)();

      // Kh√¥i ph·ª•c console.log
      console.log = originalConsoleLog;

      // Chu·∫©n h√≥a output tr∆∞·ªõc khi so s√°nh
      const expectedOutput = lessons[currentLesson].expectedOutput;
      const expectedOutputs = (typeof expectedOutput === "string"
        ? expectedOutput.split("\n")
        : expectedOutput
      ) as string[]; // √âp ki·ªÉu r√µ r√†ng th√†nh m·∫£ng

      const finalOutput = output.trim();
      console.log(expectedOutputs, finalOutput);


      // if (currentLesson === 1 && !finalOutput.includes("something wrong")) {
      //   Swal.fire("‚ùå Sai r·ªìi!", "B·∫°n ph·∫£i ƒë·∫∑t ƒëi·ªÅu ki·ªán 'false' ƒë·ªÉ in ra 'something wrong'!", "error");
      //   return;
      // }

      // if (currentLesson === 2 && !finalOutput.includes("ƒêi·ªÅu ki·ªán ph·ª©c t·∫°p")) {
      //   Swal.fire("‚ùå Sai r·ªìi!", "B·∫°n c·∫ßn s·ª≠ d·ª•ng 'not' v√† 'true' ƒë·ªÉ ƒëi·ªÅu ki·ªán 'if' th√†nh 'false'!", "error");
      //   return;
      // }

      // if (currentLesson === 3 && !["S·ªë l·ªõn h∆°n 10", "S·ªë nh·ªè h∆°n ho·∫∑c b·∫±ng 10"].includes(finalOutput)) {
      //   Swal.fire("‚ùå Sai r·ªìi!", "H√£y ki·ªÉm tra l·∫°i c√¢u l·ªánh if-else!", "error");
      //   return;
      // }

      // So s√°nh output v·ªõi k·∫øt qu·∫£ mong ƒë·ª£i
      if (expectedOutputs.some(e => finalOutput.includes(e.trim()))) {
        Swal.fire({
          title: "üéâ Ch√≠nh x√°c!",
          text: "B·∫°n ƒë√£ ho√†n th√†nh b√†i h·ªçc!",
          icon: "success",
          showConfirmButton: true,
          confirmButtonText: "Ti·∫øp t·ª•c b√†i ti·∫øp theo",
        }).then(() => {
          if (currentLesson < lessons.length - 1) {
            navigate(`/lesson/${id}/${chapterIndex}/${currentLesson + 1}`);
          } else {
            Swal.fire("üèÜ Ho√†n th√†nh!", "B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ b√†i h·ªçc!", "success");
          }
        });
      } else {
        Swal.fire("‚ùå Sai r·ªìi!", "Vui l√≤ng ki·ªÉm tra l·∫°i b√†i l√†m!", "error");
      }
    } catch (error) {
      Swal.fire("‚ùå L·ªói!", "C√≥ l·ªói trong ch∆∞∆°ng tr√¨nh, h√£y ki·ªÉm tra l·∫°i!", "error");
    }
  };

  const toolboxConfiguration: any = useMemo(() => {
    return lessons[currentLesson]?.toolbox || { kind: "flyoutToolbox", contents: [] };
  }, [currentLesson, lessons]);

  return (
    <div className="lesson-container">
      <div className="flex justify-between">
        <div>
          <h2>{lessons[currentLesson].title}</h2>
          <p>{lessons[currentLesson].description}</p>
        </div>
        <div >
          <button className="run-button" onClick={runCode}>‚è© Ch·∫°y ch∆∞∆°ng tr√¨nh</button>
        </div>
      </div>

      {/* Blockly Workspace */}
      <div className="blockly-container">
        <BlocklyWorkspace
          toolboxConfiguration={toolboxConfiguration}
          workspaceConfiguration={{ grid: { spacing: 20, length: 3, colour: "#ccc", snap: true } }}
          className="fill-height"
          onWorkspaceChange={(ws) => {
            setWorkspace(ws);
            onWorkspaceChange(ws);
          }}
        />
      </div>

      {/* Khu v·ª±c hi·ªÉn th·ªã code */}
      <h3>Generated JavaScript Code:</h3>
      <pre className="code-box">{generatedCode}</pre>
    </div>
  );
}

export default LessonLogic;
